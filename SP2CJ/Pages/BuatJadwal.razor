@page "/BuatJadwal"
@using SP2CJ.Services

<PageTitle>Buat Jadwal</PageTitle>
<h1>Buat Jadwal</h1>

<div class="block columns">
    <div class="container block is-half column is-pulled-left is-vcentered">
        <EditForm Model="@newJadwal" OnValidSubmit="@HandleInput">
            <div class="control block">
                <label class=" is-justify-content-space-between">
                    Tanggal:
                </label>
                <DatePicker TValue="DateTime" DateChanged="@Datechangedevent" Date="@newJadwal.tanggal">
                </DatePicker>
            </div>
            <div class="control block">
                <label class="ignoreFlex is-justify-content-space-between">
                    Jenis Ibadah:
                </label>
                <Select TValue="string" SelectedValue="@jenis" SelectedValueChanged="@OnSelectedValueChanged">
                    @foreach (var list in listIbadah)
                    {
                        <SelectItem Value="list.itemName">@list.itemName</SelectItem>
                    }
                </Select>
            </div>
            <div class="control block">
                <label class="ignoreFlex is-justify-content-space-between">
                    Tema:
                </label>
                <InputText @attributes="InputAttributes" @bind-Value="@newJadwal.Tema" />
            </div>
            @foreach (var role in listRoleType)
            {
                @if (pelayans[role.RoleCode].Any())
                {
                    <div class="control block is-bordered">

                        <label class="ignoreFlex is-justify-content-space-between">
                            @role.RoleName:
                        </label>
                        <input class="input" @bind:event="oninput" @onkeyup="() => filter(role.RoleCode)" placeholder="Isi Nama (Wajib)" type="text" @bind="filterDictionary[role.RoleCode]">
                        <table class="table is-striped is-hoverable">
                            @if (pelayansFiltered[role.RoleCode].Any() || pelayanSelected[role.RoleCode].Any())
                            {
                                <tr>
                                    <th>Nama</th>
                                    <th>Role</th>
                                    <th>Action</th>
                                </tr>
                            }
                            @foreach (var loop in pelayanSelected[role.RoleCode])
                            {
                                <tr class="is-selected">
                                    <td>@loop.Jemaat.FullName</td>
                                    <td>@loop.Role.RoleName</td>
                                    <td>
                                        <button @onclick="() => deletePelayan(role.RoleCode, loop)" type="button" class="is-small button is-danger">Hapus</button>
                                    </td>
                                </tr>
                            }
                            @foreach (var loop in pelayansFiltered[role.RoleCode])
                            {
                                @foreach (var roleJemaat in @loop.Roles.Where(roleJemaat => @roleJemaat.RoleCode == role.RoleCode))
                                {
                                    <tr>
                                        <td>@loop.FullName</td>
                                        <td>@roleJemaat.RoleName</td>
                                        <td>
                                            <button type="button" @onclick="@(() => addPelayan(role.RoleCode, loop, roleJemaat))" class="is-small button is-primary">Pilih</button>
                                        </td>
                                    </tr>
                                }
                            }
                        </table>
                    </div>
                }   }
            <tr>
                <div class="block">
                    <button type="submit" class="is-pulled-right button is-success">Simpan</button>
                </div>
            </tr>
        </EditForm>
    </div>
</div>

@inject NavigationManager _navigationManager


@code {
    CrudMongo cm = new CrudMongo();
    Jadwal newJadwal = new();
    List<RefMasterItem> listIbadah = new();
    List<RefRole> listRoleType = new();
    Dictionary<string, List<Jemaat>> pelayans = new();
    Dictionary<string, List<Jemaat>> pelayansFiltered = new();
    Dictionary<string, List<Pelayan>> pelayanSelected = new();
    Dictionary<string, string> filterDictionary = new();
    string jenis;
    private void addPelayan(string code, Jemaat jemaat, RefRole role)
    {
        pelayanSelected[code].Add(new Pelayan(role, jemaat, code));
        var a = pelayans[code].RemoveAll(a => a.Id == jemaat.Id);
        filter(code);
    }

    private void filter(string code)
    {
        var searchString = filterDictionary[code];
        pelayansFiltered[code] = searchString != "" ? pelayans[code].Where(a => a.FullName.ToUpper().Contains(searchString.ToUpper())).OrderBy(jemaat => jemaat.Name).ToList() : new List<Jemaat>();
    }

    private void deletePelayan(string code, Pelayan pelayan)
    {
        pelayanSelected[code].Remove(pelayan);
        pelayans[code].Add(pelayan.Jemaat);
        filter(code);
    }

    protected override void OnInitialized()
    {
        FSMerged fs = new FSMerged();
        listIbadah = fs.GetRefMasterItems("IBDH").ItemList;
        listRoleType = cm.GetRefRoles();
        var now = DateTime.Now;
        foreach (var a in listRoleType)
        {
            pelayanSelected[a.RoleCode] = new List<Pelayan>();
            filterDictionary[a.RoleCode] = String.Empty;
            pelayansFiltered[a.RoleCode] = new List<Jemaat>();
        }
        newJadwal.tanggal = now.AddDays(7 - (int)now.DayOfWeek);
        pelayans = cm.pelayansSorted(newJadwal.tanggal);
        jenis = listIbadah[0].itemName;
        newJadwal.JenisJadwal = jenis;
    }

    private void HandleInput()
    {
        newJadwal.PelayansJadwal = pelayanSelected;
        cm.submitJadwal(newJadwal);
        _navigationManager.NavigateTo("/BuatJadwal");
        newJadwal = new Jadwal();
        newJadwal.tanggal = DateTime.Now;
    }
    Dictionary<string, object> InputAttributes { get; set; } =
        new()
                                                                                        {
            { "class", "input" }
                                                                                        };

    void Datechangedevent(DateTime date)
    {

        pelayans = cm.pelayansSorted(newJadwal.tanggal);

        newJadwal = cm.getJadwalHariAndJenis(date,jenis);
        if (newJadwal != null) return;
        newJadwal = new Jadwal
            {
                tanggal = date
            };
        foreach (var a in listRoleType)
        {
            pelayanSelected[a.RoleCode] = new List<Pelayan>();
        }
    }

    Task OnSelectedValueChanged(string value)
    {
        var saveJadwal = newJadwal;
        jenis = value;
        newJadwal.JenisJadwal = value;
        newJadwal = cm.getJadwalHariAndJenis(newJadwal.tanggal, jenis);


        if (newJadwal != null) return Task.CompletedTask;
        newJadwal = saveJadwal;


        return Task.CompletedTask;

    }

}
